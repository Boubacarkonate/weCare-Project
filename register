import { useState } from 'react';
import { createUserWithEmailAndPassword, sendEmailVerification } from 'firebase/auth';
import { authentication, db, storage } from '../../../firebase/firebaseConfig';
import { getDownloadURL, ref, uploadBytes } from "firebase/storage";
import { doc, serverTimestamp, setDoc } from 'firebase/firestore';
import User from '../../model/User.model';
import { Alert } from 'react-native';
import bcrypt from 'bcryptjs'; 
import * as ImagePicker from 'expo-image-picker';

export default function RegisterViewModel() {
    // States pour l'utilisateur et les erreurs
    const [user, setUser] = useState(new User('', '', '', null, false));
    const [error, setError] = useState(null);

    // Fonction pour enregistrer l'utilisateur
    const registerUser = async () => {
        try {
            // V√©rification des donn√©es utilisateur
            if (!isValidUserData(user)) {
                throw new Error('Invalid user data. Please enter valid information.');
            }

            // V√©rification que les deux mots de passe correspondent
            if (user.password !== user.confirmPassword) {
                throw new Error('Passwords do not match. Please make sure the passwords match.');
            }

            // Hachage du mot de passe
            const hashedPassword = await hashPassword(user.password);

            // Cr√©ation de l'utilisateur dans Firebase Authentication
            const credentials = await createUserWithEmailAndPassword(authentication, user.email, user.password);
            const userUID = credentials.user.uid;

            // T√©l√©chargement de l'image si une image d'avatar est s√©lectionn√©e
            const avatarUrl = user.avatarUrl ? await uploadImage(user.avatarUrl) : 'https://static.thenounproject.com/png/363640-200.png';

            // Enregistrement des informations utilisateur dans Firestore
            const docUserRef = doc(db, 'utilisateurs', userUID);
            const role = user.isAdmin ? 'admin' : 'user';
            await setDoc(docUserRef, {
                avatarUrl,
                username: user.username,
                email: user.email,
                password: hashedPassword,
                userUID,
                role,
                createdAt: serverTimestamp()
            });

            // Envoi de l'e-mail de v√©rification
            await sendEmailVerification(credentials.user);

            // Affichage d'une confirmation √† l'utilisateur
            Alert.alert('Success', 'Registered successfully');
        } catch (error) {
            console.error('Registration error:', error.message);
            setError(error.message);
            Alert.alert('Error', 'An error occurred during registration. Please try again.');
        }
    };

    // Fonction de validation des donn√©es utilisateur
    const isValidUserData = (userData) => {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).{14,}$/;
        return userData.email && userData.password && userData.confirmPassword && userData.username && emailRegex.test(userData.email) && passwordRegex.test(userData.password);
    };

    // Fonction pour hacher le mot de passe
    const hashPassword = async (password) => {
        const saltRounds = 10;
        return await bcrypt.hash(password, saltRounds);
    };

    // Fonction pour choisir une image depuis la biblioth√®que
    const pickImage = async () => {
        let result = await ImagePicker.launchImageLibraryAsync({
            mediaTypes: ImagePicker.MediaTypeOptions.Images,
            allowsEditing: true,
            aspect: [4, 3],
            quality: 1,
        });

        if (!result.canceled) {
            setUser({ ...user, avatarUrl: result.assets[0].uri });
        }
    };

    // Fonction pour prendre une photo avec l'appareil photo
    const takePhoto = async () => {
        let result = await ImagePicker.launchCameraAsync({
            allowsEditing: true,
            aspect: [4, 3],
            quality: 1,
        });

        if (!result.canceled) {
            setUser({ ...user, avatarUrl: result.assets[0].uri });
        }
    };

    // Fonction pour afficher les options de s√©lection d'image
    const showImagePickerOptions = () => {
        Alert.alert(
            'Choisissez une option üì∏',
            'Voulez-vous choisir une image de votre biblioth√®que ou prendre une nouvelle photo?',
            [
                {
                    text: 'Choisir de la biblioth√®que',
                    onPress: pickImage,
                },
                {
                    text: 'Prendre une photo',
                    onPress: takePhoto,
                },
                {
                    text: 'Annuler',
                    onPress: () => {},
                    style: 'cancel',
                },
            ]
        );
    };

    // Fonction pour t√©l√©charger l'image dans Firebase Storage et obtenir l'URL de t√©l√©chargement
    const uploadImage = async (imageUri) => {
        try {
            console.log("Image s√©lectionn√©e :", imageUri);
            const filename = imageUri.substring(imageUri.lastIndexOf("/") + 1);
            const storageRef = ref(storage, `images/${filename}`);
            const response = await fetch(imageUri);
            const blob = await response.blob();
            const uploadTask = await uploadBytes(storageRef, blob);
            const downloadURL = await getDownloadURL(uploadTask.ref);
            console.log("Image t√©l√©charg√©e avec succ√®s vers Firebase Storage", downloadURL);
            return downloadURL;
        } catch (error) {
            console.error("Erreur lors du t√©l√©chargement de l'image vers Firebase Storage :", error);
            throw error;
        }
    };

    return {
        user,
        setUser,
        registerUser,
        showImagePickerOptions,
        error
    };
}


//RegisterView
import React from 'react';
import { StyleSheet, View, Text, Pressable, Image, ScrollView } from 'react-native';
import { Input, Button } from 'react-native-elements';
import { Ionicons } from '@expo/vector-icons';
import useRegister from '../../viewModel/authViewModel/RegisterModelView';
import Checkbox from 'expo-checkbox';


export default function Register() {
    const { user, setUser, registerUser, showImagePickerOptions, error } = useRegister();

    return (
        <ScrollView 
            contentContainerStyle={styles.container} 
            showsHorizontalScrollIndicator={true}
            indicatorStyle="pink" // Couleur de la barre de d√©filement
            style={{ width: '100%', height: '100%', scrollbarWidth: 10, scrollbarColor: 'yellow' }} // Style pour la ScrollView
        >
            <Input
                placeholder='Enter your email'
                label='Email'
                value={user.email}
                onChangeText={text => setUser({...user, email: text})}
                leftIcon={{ type: 'material', name: 'email' }}
                inputContainerStyle={styles.inputContainer}
                labelStyle={styles.inputLabel}
            />
            <Input
                placeholder='Enter your password'
                label='Password'
                value={user.password}
                onChangeText={text => setUser({...user, password: text})}
                leftIcon={{ type: 'material', name: 'lock' }}
                secureTextEntry
                inputContainerStyle={styles.inputContainer}
                labelStyle={styles.inputLabel}
            />
            <Input
                placeholder="Confirm Password"
                value={user.confirmPassword}
                onChangeText={(text) => setUser({ ...user, confirmPassword: text })}
                leftIcon={{ type: 'material', name: 'lock' }}
                secureTextEntry
                inputContainerStyle={styles.inputContainer}
                labelStyle={styles.inputLabel}
            />
            <Input
                placeholder='Enter your username'
                label='Username'
                value={user.username}
                onChangeText={text => setUser({...user, username: text})}
                leftIcon={{ type: 'material', name: 'account-circle' }}
                inputContainerStyle={styles.inputContainer}
                labelStyle={styles.inputLabel}
            />

            <View style={styles.containerAvatar}>
                <Text style={styles.introText}>üì∏ Choisissez votre avatar</Text>

                {!user.avatarUrl && (
                    <Pressable onPress={showImagePickerOptions}>
                        <View style={{ borderRadius: 300, overflow: 'hidden' }}>
                            <Ionicons name="image" size={150} color="grey" />
                        </View>
                    </Pressable>
                )}

                {user.avatarUrl && (
                    <Pressable onPress={showImagePickerOptions}>
                        <Image source={{ uri: user.avatarUrl }} style={styles.image} />
                    </Pressable>
                )}
            </View>

            <View style={styles.checkboxContainer}>
                <Checkbox
                    value={user.isAdmin}
                    onValueChange={value => setUser({...user, isAdmin: value})}
                    color={user.isAdmin ? '#4630EB' : undefined}
                />
                <Text style={styles.label}>Administrateur</Text>
            </View>

            {error && <Text style={styles.errorText}>{error}</Text>}

            <Button
                onPress={registerUser}
                title='Register'
                containerStyle={styles.btnContainer}
                buttonStyle={styles.btn}
            />
        </ScrollView>
    );
}

const styles = StyleSheet.create({
    container: {
        flexGrow: 1,
        backgroundColor: '#EEEEEE',
        alignItems: 'center',
        justifyContent: 'center',
        padding: 20,
    },
    containerAvatar: {
        alignItems: 'center',
        justifyContent: 'center',
        backgroundColor: '#fff',
        padding: 20,
        marginVertical: 20,
        borderRadius: 50,
    },
    introText: {
        fontSize: 18,
        marginBottom: 20,
        color: '#333',
    },
    image: {
        width: 150,
        height: 150,
        borderRadius: 75,
    },
    btnContainer: {
        width: '100%',
        marginTop: 20,
        borderRadius:15
    },
    btn: {
        backgroundColor: '#38b6ff'
    },
    checkboxContainer: {
        flexDirection: 'row',
        marginBottom: 20,
        alignItems: 'center',
    },
    inputContainer: {
        borderWidth: 1,
        borderColor: '#ccc',
        borderRadius: 20,
        paddingHorizontal: 10,
        marginVertical: 10,
    },
    inputLabel: {
        color: '#333',
        fontSize: 16,
        // marginBottom: 1,
    },
    errorText: {
        color: 'red',
        marginTop: 10,
    },
});